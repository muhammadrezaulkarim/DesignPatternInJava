package com.pattern.example.facade;

//The Façade pattern deals with a subsystem of classes.

//A subsystem is a set of
//classes that work in conjunction with each other for the purpose of providing a
//set of related features (functionality). For example, an Account class, Address
//class and CreditCard class working together, as part of a subsystem, provide
//features of an online customer

/*In real world applications, a subsystem could consist of a large number of
classes. Clients of a subsystem may need to interact with a number of subsystem
classes for their needs. This kind of direct interaction of clients with subsystem
classes leads to a high degree of coupling between the client objects and the
subsystem (Figure 22.1). Whenever a subsystem class undergoes a change,
such as a change in its interface, all of its dependent client classes may get
affected.*/

public class CustomerFacade {
	private String address;
	private String city;
	private String state;
	private String cardType;
	private String cardNumber;
	private String cardExpDate;
	private String fname;
	private String lname;

	public void setAddress(String inAddress) 
	{
		address = inAddress;
	}

	public void setCity(String inCity) {
		city = inCity;
	}

	public void setState(String inState) {
		state = inState;
	}

	public void setFName(String inFName) {
		fname = inFName;
	}

	public void setLName(String inLName) {
		lname = inLName;
	}

	public void setCardType(String inCardType) {
		cardType = inCardType;
	}

	public void setCardNumber(String inCardNumber) {
		cardNumber = inCardNumber;
	}

	public void setCardExpDate(String inCardExpDate) {
		cardExpDate = inCardExpDate;
	}

	public boolean saveCustomerData() {
		Address objAddress;
		Account objAccount;
		CreditCard objCreditCard;
		/*
		 * 
		 * client is transparent from the following set of subsystem related
		 * operations.
		 */
		boolean validData = true;
		String errorMessage = "";
		objAccount = new Account(fname, lname);
		
		if (objAccount.isValid() == false) {
			validData = false;
			errorMessage = "Invalid FirstName/LastName";
		}
		objAddress = new Address(address, city, state);
		if (objAddress.isValid() == false) {
			validData = false;
			errorMessage = "Invalid Address/City/State";
		}
		
		objCreditCard = new CreditCard(cardType, cardNumber, cardExpDate);
		
		if (objCreditCard.isValid() == false) 
		{
			validData = false;
			errorMessage = "Invalid CreditCard Info";
		}
		if (!validData) {
			System.out.println(errorMessage);
			return false;
		}
		if (objAddress.save() && objAccount.save() && objCreditCard.save()) {
			return true;
		} else {
			return false;
		}
	}
}